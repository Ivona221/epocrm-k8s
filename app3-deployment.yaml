apiVersion: v1
kind: Namespace
metadata:
  name: app3

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: espocrm
  namespace: app3
spec:
  replicas: 1
  selector:
    matchLabels:
      app: espocrm
  template:
    metadata:
      labels:
        app: espocrm
    spec:
      containers:
      - name: espocrm
        image: espocrm/espocrm
        volumeMounts:
        - mountPath: /var/www/html
          name: espocrm
        ports:
        - containerPort: 80
        env:
        - name: ESPOCRM_ADMIN_PASSWORD
          value: password
        - name: ESPOCRM_ADMIN_USERNAME
          value: admin
        - name: ESPOCRM_DATABASE_HOST
          value: espocrm-db-single.mysql.database.azure.com
        - name: ESPOCRM_DATABASE_PASSWORD
          value: password1!
        - name: ESPOCRM_DATABASE_USER
          value: db_user@espocrm-db-single
        - name: ESPOCRM_SITE_URL
          value: http://localhost:80
      volumes:
      - name: espocrm
        persistentVolumeClaim:
          claimName: espocrm
---
apiVersion: v1
kind: Service
metadata:
  name: espocrm
  namespace: app3
spec:
  type: ClusterIP
  ports:
  - port: 80
  selector:
    app: espocrm

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: espocrm-daemon
  namespace: app3
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: espocrm-daemon
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: espocrm-daemon
    spec:
      containers:
        - command:
            - docker-daemon.sh
          image: espocrm/espocrm
          name: espocrm-daemon
          resources: {}
          volumeMounts:
            - mountPath: /var/www/html
              name: espocrm
      restartPolicy: Always
      volumes:
        - name: espocrm
          persistentVolumeClaim:
            claimName: espocrm
status: {}

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: espocrm-ingress-app3
  namespace: app3
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    # nginx.ingress.kubernetes.io/server-snippets: |
    #   location /app3 {
    #   proxy_set_header Upgrade $http_upgrade;
    #   proxy_http_version 1.1;
    #   proxy_set_header X-Forwarded-Host $http_host;
    #   proxy_set_header X-Forwarded-Proto $scheme;
    #   proxy_set_header X-Forwarded-For $remote_addr;
    #   proxy_set_header Host $host;
    #   proxy_set_header Connection "upgrade";
    #   proxy_cache_bypass $http_upgrade;
    #   }
spec:
  ingressClassName: nginx
  rules:
  - host: app3.testblobstorage.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: espocrm
            port:
              number: 80
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: espocrm-websocket
            port:
              number: 8081

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: espocrm
  name: espocrm
  namespace: app3
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: espocrm-websocket
  name: espocrm-websocket
  namespace: app3
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: espocrm-websocket
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: espocrm-websocket
    spec:
      containers:
        - command:
            - docker-websocket.sh
          env:
            - name: ESPOCRM_CONFIG_USE_WEB_SOCKET
              value: "true"
            - name: ESPOCRM_CONFIG_WEB_SOCKET_URL
              value: http://app3.testblobstorage.com/ws
            - name: ESPOCRM_CONFIG_WEB_SOCKET_ZERO_M_Q_SUBMISSION_DSN
              value: tcp://espocrm-websocket:7777
            - name: ESPOCRM_CONFIG_WEB_SOCKET_ZERO_M_Q_SUBSCRIBER_DSN
              value: tcp://*:7777
          image: espocrm/espocrm
          name: espocrm-websocket
          ports:
            - containerPort: 8080
          resources: {}
          volumeMounts:
            - mountPath: /var/www/html
              name: espocrm
      restartPolicy: Always
      volumes:
        - name: espocrm
          persistentVolumeClaim:
            claimName: espocrm
status: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: espocrm-websocket
  name: espocrm-websocket
  namespace: app3
spec:
  ports:
    - name: "8081"
      port: 8081
      targetPort: 8080
  selector:
    io.kompose.service: espocrm-websocket
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: app3
spec:
  type: ExternalName
  externalName: espocrm-db-single.mysql.database.azure.com

# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   labels:
#     io.kompose.service: mysql
#   name: mysql
#   namespace: app3
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       io.kompose.service: mysql
#   strategy:
#     type: Recreate
#   template:
#     metadata:
#       labels:
#         io.kompose.service: mysql
#     spec:
#       containers:
#         - args:
#             - --default-authentication-plugin=mysql_native_password
#           env:
#             - name: MYSQL_DATABASE
#               value: espocrm
#             - name: MYSQL_PASSWORD
#               value: database_password
#             - name: MYSQL_ROOT_PASSWORD
#               value: root_password
#             - name: MYSQL_USER
#               value: espocrm
#           image: mysql:8
#           name: mysql
#           resources: {}
#           volumeMounts:
#             - mountPath: /var/lib/mysql
#               name: mysql
#       restartPolicy: Always
#       volumes:
#         - name: mysql
#           persistentVolumeClaim:
#             claimName: mysql
# status: {}

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   labels:
#     io.kompose.service: mysql
#   name: mysql
#   namespace: app3
# spec:
#   ports:
#     - name: "3306"
#       port: 3306
#       targetPort: 3306
#   selector:
#     io.kompose.service: mysql
# status:
#   loadBalancer: {}

# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   creationTimestamp: null
#   labels:
#     io.kompose.service: mysql
#   name: mysql
#   namespace: app3
# spec:
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 100Mi
# status: {}

